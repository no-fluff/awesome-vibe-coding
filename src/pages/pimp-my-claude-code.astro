---
/*
 * Pimp My Claude Code page - Shows only entries with Claude Code integration
 * Filters all sections to display entries where agents array contains "claude-code"
 */

import Layout from '../layouts/Layout.astro';
import { loadData } from '../lib/data-loader.js';

const { sections: loadedSections, categories } = loadData();

// Filter function to get only entries with claude-code in agents array
function filterClaudeCodeEntries(items) {
  if (!items || !Array.isArray(items)) return [];
  return items.filter(item => 
    item.agents && Array.isArray(item.agents) && item.agents.includes('claude-code')
  );
}

// Transform loaded sections into the format needed for this page
const sections = loadedSections.map(section => {
  const descriptions = {
    'apps': 'Soup-to-nuts apps for vibing with Claude Code.',
    'interfaces': 'Use Claude Code outside the terminal.',
    'tools': 'Everything you can plug into Claude Code.',
    'workflows': 'Claude Code rules and processes to help you ship higher-quality code, faster.',
    'hosted-agents': 'These closed-source agents with Claude Code integration are hosted for you.'
  };
  
  const icons = {
    'agents': 'agents.png',
    'apps': 'apps.png',
    'interfaces': 'interfaces.png',
    'tools': 'tools.png',
    'workflows': 'workflows.png',
    'hosted-agents': 'hosted-agents.png'
  };
  
  return {
    id: section.id,
    title: section.title,
    icon: icons[section.id],
    description: descriptions[section.id] || null,
    data: filterClaudeCodeEntries(section.items)
  };
});

// Filter out sections with no data
const activeSections = sections.filter(section => section.data.length > 0);

function renderItem(item) {
  const hotEmoji = item.hot ? 'ðŸ”¥ ' : '';
  const hasWebsite = !!item.website;
  const hasRepo = !!item.repo;
  
  // Use the website URL for the name link, otherwise use the repo URL
  const nameUrl = item.website || item.repo;
  
  // GitHub icon SVG
  const githubIcon = '<img src="https://raw.githubusercontent.com/no-fluff/awesome-vibe-coding/main/src/images/github.svg" width="16" height="16" alt="GitHub" align="absmiddle" />';
  
  return `
    <details>
      <summary><strong>${hotEmoji}${nameUrl ? `<a href="${nameUrl}">${item.name}</a>` : item.name}${hasRepo && hasWebsite ? ` <a href="${item.repo}">${githubIcon}</a>` : ''}${hasRepo && !hasWebsite ? ` <a href="${item.repo}">${githubIcon}</a>` : ''}</strong> ${item.summary}</summary>
      
      <blockquote>${item.detail || item.summary}</blockquote>
    </details>
  `;
}

function renderCategories(sectionId) {
  const sectionCategories = categories[sectionId];
  if (!sectionCategories || !Array.isArray(sectionCategories)) return '';
  
  // Find which categories are actually used in filtered data
  const usedCategories = new Set();
  const section = activeSections.find(s => s.id === sectionId);
  if (section && section.data) {
    section.data.forEach((item) => {
      if (item.category && sectionCategories.includes(item.category)) {
        usedCategories.add(item.category);
      }
    });
  }
  
  // Generate category links for used categories only
  const categoryLinks = sectionCategories
    .filter(cat => usedCategories.has(cat))
    .map(cat => `<li><a href="#${cat.toLowerCase().replace(/\s+/g, '-')}">${cat}</a></li>`)
    .join('\n    ');
  
  return categoryLinks ? `\n    <ul>\n    ${categoryLinks}\n    </ul>` : '';
}

function renderSection(section) {
  if (!section.data || section.data.length === 0) return '';
  
  // For tools section, group by categories
  if (section.id === 'tools') {
    const categoryGroups = {};
    section.data.forEach(item => {
      const cat = item.category || 'Uncategorized';
      if (!categoryGroups[cat]) {
        categoryGroups[cat] = [];
      }
      categoryGroups[cat].push(item);
    });
    
    let html = '';
    Object.keys(categoryGroups).sort().forEach(category => {
      const anchorId = category.toLowerCase().replace(/\s+/g, '-');
      html += `<h3 id="${anchorId}">â€¢ ${category}</h3>\n\n`;
      categoryGroups[category].forEach(item => {
        html += renderItem(item) + '\n\n';
      });
    });
    
    return html;
  }
  
  // For other sections, just render items directly
  let html = '';
  section.data.forEach(item => {
    html += renderItem(item) + '\n\n';
  });
  
  return html;
}
---

<Layout title="Pimp My Claude Code">
  <article>
    <h1>Pimp My Claude Code</h1>
    
    <p style="font-size: 1.1rem;">
      Resources for enhancing your Claude Code ride.
    </p>
    
    <p style="display: flex; align-items: center; gap: 0.5rem; font-size: 1.1rem;">
      Don't miss any fresh Claude Code tools: 
      <a href="https://github.com/no-fluff/awesome-vibe-coding" 
         style="display: inline-flex; align-items: center; gap: 0.25rem; padding: 0.25rem 0.75rem; background-color: #1f883d; color: white; text-decoration: none; border-radius: 6px; font-weight: 500; font-size: 0.875rem;"
         onmouseover="this.style.backgroundColor='#1a7f37'"
         onmouseout="this.style.backgroundColor='#1f883d'">
        <svg height="16" width="16" viewBox="0 0 16 16" style="fill: currentColor;">
          <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
        </svg>
        Star
      </a>
      this on GitHub
    </p>
    
    <p style="display: flex; align-items: center; gap: 0.5rem; font-size: 1.1rem;">
      See vibe-coding resources for all agents: 
      <a href="/" 
         style="display: inline-flex; align-items: center; gap: 0.25rem; padding: 0.25rem 0.75rem; background-color: #e5e7eb; color: #374151; text-decoration: none; border-radius: 6px; font-weight: 500; font-size: 0.875rem;"
         onmouseover="this.style.backgroundColor='#d1d5db'"
         onmouseout="this.style.backgroundColor='#e5e7eb'">
        View All
      </a>
    </p>
    
    <ul>
      {activeSections.map(section => {
        const sectionAnchor = section.id === 'hosted-agents' ? 'cloud-only-agents' : 
                             section.id === 'apps' ? 'vibe-coding-apps' : 
                             section.id === 'interfaces' ? 'agent-interfaces' : 
                             section.id === 'tools' ? 'tools-and-mcp-servers' : 
                             section.id === 'workflows' ? 'vibe-coding-workflows' : 
                             section.id;
        return (
          <li>
            <p><a href={`#${sectionAnchor}`}><strong>{section.title}</strong></a></p>
            {renderCategories(section.id) && <Fragment set:html={renderCategories(section.id)} />}
          </li>
        );
      })}
    </ul>

    <br />

    {activeSections.map(section => (
      <>
        <h2 id={section.id === 'hosted-agents' ? 'cloud-only-agents' : section.id === 'apps' ? 'vibe-coding-apps' : section.id === 'interfaces' ? 'agent-interfaces' : section.id === 'tools' ? 'tools-and-mcp-servers' : section.id === 'workflows' ? 'vibe-coding-workflows' : section.id}>
          <img 
            src={`https://raw.githubusercontent.com/no-fluff/awesome-vibe-coding/main/src/images/${section.icon}`} 
            width="36" 
            height="36" 
            alt={section.title} 
            align="absmiddle" 
          />&nbsp; {section.title}
        </h2>
        
        {section.description && (
          <p><em>{section.description}</em></p>
        )}
        
        <Fragment set:html={renderSection(section)} />
        
        <br />
      </>
    ))}
  </article>
</Layout>