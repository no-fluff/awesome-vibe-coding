---
import Layout from '../layouts/Layout.astro';
import { loadData } from '../lib/data-loader.js';
import { buildSearchText, tileStyle, getAggregatedCategories } from '../lib/catalog-helpers.js';

const { sections, categories } = loadData();

const typeOptions = sections.map((section) => ({
  value: section.id,
  label: section.title
}));

const aggregatedCategories = getAggregatedCategories(categories);

const categoriesJSON = JSON.stringify(categories);
const totalEntries = sections.reduce((count, section) => count + section.items.length, 0);
---

<Layout title="Awesome Vibe Coding">
  <main class="stream-page">
    <header class="page-hero">
      <div class="hero-content">
        <h1 class="hero-title">
          <span class="hero-gradient">Awesome</span>
          <span class="hero-text">Vibe Coding</span>
        </h1>
        <p class="hero-subtitle">
          Discover agents, interfaces, and automations that transform your development workflow
        </p>
        <div class="hero-actions">
          <a class="btn-primary" href="https://github.com/no-fluff/awesome-vibe-coding" target="_blank" rel="noreferrer">
            <svg aria-hidden="true" viewBox="0 0 16 16">
              <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
            </svg>
            Star on GitHub
          </a>
        </div>
      </div>
    </header>

    <div class="filter-bar">
      <div class="search-container">
        <svg class="search-icon" aria-hidden="true" viewBox="0 0 24 24">
          <path d="m21 21-4.35-4.35m1.85-4.32a6.17 6.17 0 1 1-12.33 0 6.17 6.17 0 0 1 12.33 0Z" />
        </svg>
        <input type="search" name="search" placeholder="Search tools, agents, and workflows" data-role="search" />
      </div>
      
      <div class="filter-controls">
        <select data-role="type-filter" class="filter-select">
          <option value="all" selected>All types</option>
          {typeOptions.map((option) => (
            <option value={option.value}>{option.label}</option>
          ))}
        </select>
        
        <select data-role="category-filter" class="filter-select">
          <option value="all" selected>All categories</option>
          {aggregatedCategories.map((category) => (
            <option value={category}>{category}</option>
          ))}
        </select>
        
        <div class="filter-toggles">
          <label class="toggle-item">
            <input type="checkbox" data-role="open-source-filter" />
            <span>Open source</span>
          </label>
          <label class="toggle-item">
            <input type="checkbox" data-role="hot-filter" />
            <span>ðŸ”¥ Hot</span>
          </label>
        </div>
      </div>
    </div>

    <div class="results-meta" data-role="results-meta">
      <span class="results-count"><strong data-role="results-count">{totalEntries}</strong> entries</span>
    </div>

    <div class="empty-state" data-role="empty-state" hidden>
      <div class="empty-content">
        <h2>No results found</h2>
        <p>Try adjusting your filters or search terms</p>
      </div>
    </div>

    {sections.map((section) => (
      <section class="content-section" data-role="section" data-section-id={section.id}>
        <div class="section-header">
          <h2 class="section-title">{section.title}</h2>
          <p class="section-subtitle">{section.tagline}</p>
        </div>
        
        <div class="content-grid">
          {section.items.map((item) => {
            const primaryUrl = item.website || item.repo || null;
            const searchText = buildSearchText(item, section.title);
            const categoriesForItem = [item.category]
              .filter(Boolean)
              .join('|');

            return (
              <article
                class="content-card"
                data-role="tile"
                data-section={section.id}
                data-categories={categoriesForItem}
                data-open-source={item.open_source ? 'true' : 'false'}
                data-hot={item.hot ? 'true' : 'false'}
                data-search={searchText}
              >
                <a 
                  class="card-media" 
                  href={primaryUrl || '#'}
                  target="_blank"
                  rel="noreferrer"
                  style={tileStyle(item)}
                >
                  <div class="media-gradient"></div>
                  {item.hot && (
                    <span class="hot-badge">
                      <span class="hot-icon">ðŸ”¥</span>
                      HOT
                    </span>
                  )}
                  <div class="media-scroll-container">
                    <div class="media-content">
                      <h3 class="media-title">{item.name}</h3>
                      <p class="media-summary">{item.summary}</p>
                      {item.detail && (
                        <div class="media-detail">
                          <p>{item.detail}</p>
                        </div>
                      )}
                    </div>
                  </div>
                </a>
                
                <div class="card-meta">
                  <div class="meta-tags">
                    {item.category && item.category !== 'Open source' && (
                      <span class="meta-tag">{item.category}</span>
                    )}
                    {item.open_source && (
                      <span class="meta-tag meta-tag--oss">Open Source</span>
                    )}
                  </div>
                  
                  <div class="card-actions">
                    {item.website && (
                      <a href={item.website} target="_blank" rel="noreferrer" class="action-link">
                        <svg aria-hidden="true" viewBox="0 0 16 16">
                          <path d="M8.75 1.75a.75.75 0 0 0 0 1.5h3.19L6.47 8.72a.75.75 0 1 0 1.06 1.06l5.47-5.47v3.19a.75.75 0 0 0 1.5 0v-5a.75.75 0 0 0-.75-.75h-5Z" />
                          <path d="M3.75 2A1.75 1.75 0 0 0 2 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0 0 14 12.25v-3a.75.75 0 0 0-1.5 0v3c0 .138-.112.25-.25.25h-8.5a.25.25 0 0 1-.25-.25v-8.5c0-.138.112-.25.25-.25h3a.75.75 0 0 0 0-1.5h-3Z" />
                        </svg>
                      </a>
                    )}
                    {item.repo && (
                      <a href={item.repo} target="_blank" rel="noreferrer" class="action-link">
                        <svg aria-hidden="true" viewBox="0 0 16 16">
                          <path d="M8 0C3.58 0 0 3.58 0 8a8 8 0 0 0 5.47 7.59c.4.07.55-.17.55-.38v-1.33C3.73 14.39 3.27 12.8 3.27 12.8a2.18 2.18 0 0 0-.91-1.2c-.75-.51.06-.5.06-.5.83.06 1.27.86 1.27.86.74 1.27 1.95.9 2.42.69.07-.54.29-.9.52-1.1-2.22-.25-4.56-1.11-4.56-4.95 0-1.09.39-1.98 1.02-2.68-.1-.25-.44-1.29.1-2.68 0 0 .83-.27 2.75 1.02a9.46 9.46 0 0 1 5 0c1.92-1.29 2.75-1.02 2.75-1.02.54 1.39.2 2.43.1 2.68.63.7 1.02 1.59 1.02 2.68 0 3.85-2.34 4.69-4.57 4.94.3.27.57.81.57 1.64v2.43c0 .21.15.46.55.38A8 8 0 0 0 16 8c0-4.42-3.58-8-8-8Z" />
                        </svg>
                      </a>
                    )}
                  </div>
                </div>
              </article>
            );
          })}
        </div>
      </section>
    ))}
  </main>

  <script type="application/json" id="category-data" set:html={categoriesJSON}></script>
  <script>
    (() => {
      const searchInput = document.querySelector('[data-role="search"]');
      const typeSelect = document.querySelector('[data-role="type-filter"]');
      const categorySelect = document.querySelector('[data-role="category-filter"]');
      const openSourceToggle = document.querySelector('[data-role="open-source-filter"]');
      const hotToggle = document.querySelector('[data-role="hot-filter"]');
      const tiles = Array.from(document.querySelectorAll('[data-role="tile"]'));
      const sections = Array.from(document.querySelectorAll('[data-role="section"]'));
      const resultsCount = document.querySelector('[data-role="results-count"]');
      const emptyState = document.querySelector('[data-role="empty-state"]');
      const resultsMeta = document.querySelector('[data-role="results-meta"]');
      const categoriesData = JSON.parse(document.getElementById('category-data').textContent || '{}');

      const allCategories = Array.from(
        new Set(
          Object.values(categoriesData).flatMap((list) => (Array.isArray(list) ? list : []))
        )
      ).sort((a, b) => a.localeCompare(b));

      let searchTimeout;
      const totalCount = tiles.length;

      function debounce(func, delay) {
        return function(...args) {
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(() => func.apply(this, args), delay);
        };
      }

      function highlightSearch(text, query) {
        if (!query) return text;
        const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
        return text.replace(regex, '<mark>$1</mark>');
      }

      function updateCategoryOptions(sectionId) {
        const activeCategories = sectionId === 'all' ? allCategories : categoriesData[sectionId] || [];
        const currentValue = categorySelect.value;

        categorySelect.innerHTML = '';
        const defaultOption = document.createElement('option');
        defaultOption.value = 'all';
        defaultOption.textContent = 'All categories';
        categorySelect.appendChild(defaultOption);

        activeCategories.forEach((category) => {
          const option = document.createElement('option');
          option.value = category;
          option.textContent = category;
          categorySelect.appendChild(option);
        });

        if (activeCategories.includes(currentValue)) {
          categorySelect.value = currentValue;
        } else {
          categorySelect.value = 'all';
        }
      }

      function resetFilters() {
        searchInput.value = '';
        typeSelect.value = 'all';
        updateCategoryOptions('all');
        categorySelect.value = 'all';
        openSourceToggle.checked = false;
        hotToggle.checked = false;
        applyFilters();
      }

      function applyFilters() {
        const query = (searchInput.value || '').trim().toLowerCase();
        const sectionFilter = typeSelect.value;
        const categoryFilter = categorySelect.value;
        const openOnly = openSourceToggle.checked;
        const hotOnly = hotToggle.checked;

        let visibleTiles = 0;
        const hasActiveFilters = query || sectionFilter !== 'all' || categoryFilter !== 'all' || openOnly || hotOnly;
        
        // Update filter bar visual state
        const filterBar = document.querySelector('.filter-bar');
        if (filterBar) {
          filterBar.classList.toggle('has-filters', hasActiveFilters);
        }

        requestAnimationFrame(() => {
          tiles.forEach((tile) => {
            const searchText = tile.dataset.search || '';
            const matchesQuery = query === '' || searchText.includes(query);
            const matchesSection = sectionFilter === 'all' || tile.dataset.section === sectionFilter;
            const tileCategories = tile.dataset.categories ? tile.dataset.categories.split('|') : [];
            const matchesCategory = categoryFilter === 'all' || tileCategories.includes(categoryFilter);
            const matchesOpen = !openOnly || tile.dataset.openSource === 'true';
            const matchesHot = !hotOnly || tile.dataset.hot === 'true';

            const isVisible = matchesQuery && matchesSection && matchesCategory && matchesOpen && matchesHot;

            tile.style.display = isVisible ? '' : 'none';
            tile.classList.toggle('is-hidden', !isVisible);
            
            if (isVisible) {
              visibleTiles += 1;
              tile.style.animationDelay = `${visibleTiles * 20}ms`;
            }

            // Highlight search terms in visible tiles
            if (isVisible && query) {
              const titleElem = tile.querySelector('.media-title');
              const summaryElem = tile.querySelector('.media-summary');
              if (titleElem) {
                const originalTitle = titleElem.textContent;
                if (originalTitle.toLowerCase().includes(query)) {
                  titleElem.innerHTML = highlightSearch(originalTitle, query);
                }
              }
            }
          });

          sections.forEach((section) => {
            const sectionTiles = Array.from(section.querySelectorAll('[data-role="tile"]'));
            const hasVisible = sectionTiles.some((tile) => !tile.classList.contains('is-hidden'));
            section.style.display = hasVisible ? '' : 'none';
            section.classList.toggle('is-hidden', !hasVisible);
          });

          emptyState.toggleAttribute('hidden', visibleTiles !== 0);
          resultsCount.textContent = visibleTiles;

          // Update results meta text based on filters
          if (hasActiveFilters) {
            resultsMeta.innerHTML = `<span class="results-count">Showing <strong data-role="results-count">${visibleTiles}</strong> of ${totalCount} entries</span> <a href="#" class="reset-filters" data-role="reset-filters">Reset</a>`;
          } else {
            resultsMeta.innerHTML = `<span class="results-count"><strong data-role="results-count">${visibleTiles}</strong> entries</span>`;
          }

          // Add animation class for smooth transitions
          document.body.classList.add('filtering');
          setTimeout(() => document.body.classList.remove('filtering'), 300);
        });
      }

      // Debounced search for better performance
      const debouncedSearch = debounce(applyFilters, 150);

      updateCategoryOptions('all');
      applyFilters();

      // Event listeners
      searchInput.addEventListener('input', debouncedSearch);
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          searchInput.value = '';
          applyFilters();
        }
      });

      typeSelect.addEventListener('change', () => {
        updateCategoryOptions(typeSelect.value);
        applyFilters();
      });
      
      categorySelect.addEventListener('change', applyFilters);
      openSourceToggle.addEventListener('change', applyFilters);
      hotToggle.addEventListener('change', applyFilters);

      // Add keyboard shortcut for search (/)
      document.addEventListener('keydown', (e) => {
        if (e.key === '/' && !['INPUT', 'TEXTAREA'].includes(document.activeElement.tagName)) {
          e.preventDefault();
          searchInput.focus();
        }
      });

      // Handle reset link clicks via event delegation
      document.addEventListener('click', (e) => {
        if (e.target.matches('[data-role="reset-filters"]')) {
          e.preventDefault();
          resetFilters();
        }
      });

      // Reset scroll and handle delayed scrolling activation
      const contentCards = document.querySelectorAll('.content-card');
      contentCards.forEach(card => {
        let scrollTimeout;
        
        card.addEventListener('mouseenter', () => {
          const scrollContainer = card.querySelector('.media-scroll-container');
          if (scrollContainer) {
            scrollContainer.scrollTop = 0;
            // Add scrollable class after 500ms delay
            scrollTimeout = setTimeout(() => {
              scrollContainer.classList.add('scrollable-active');
            }, 500);
          }
        });
        
        card.addEventListener('mouseleave', () => {
          const scrollContainer = card.querySelector('.media-scroll-container');
          if (scrollContainer) {
            clearTimeout(scrollTimeout);
            scrollContainer.classList.remove('scrollable-active');
          }
        });
      });
    })();
  </script>
</Layout>

<style>
  .stream-page {
    width: 100%;
    max-width: 1920px;
    margin: 0 auto;
    padding: 0;
    position: relative;
    z-index: 1;
  }

  .page-hero {
    padding: 80px 40px;
    text-align: center;
    position: relative;
    overflow: hidden;
  }

  .page-hero::before {
    content: '';
    position: absolute;
    inset: 0;
    background: 
      radial-gradient(circle at 30% 50%, rgba(20, 184, 166, 0.25) 0%, transparent 40%),
      radial-gradient(circle at 70% 50%, rgba(251, 191, 36, 0.2) 0%, transparent 40%);
    filter: blur(60px);
    z-index: -1;
  }

  .hero-content {
    max-width: 800px;
    margin: 0 auto;
  }

  .hero-title {
    font-size: clamp(3rem, 7vw, 5rem);
    font-weight: 800;
    margin-bottom: 1rem;
    letter-spacing: -0.02em;
    line-height: 1;
  }

  .hero-gradient {
    background: linear-gradient(135deg, #14b8a6 0%, #fbbf24 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .hero-text {
    color: var(--page-text);
  }

  .hero-subtitle {
    font-size: 1.25rem;
    color: var(--page-muted);
    margin-bottom: 2rem;
    font-weight: 400;
  }

  .hero-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
  }

  .btn-primary {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 12px 24px;
    background: linear-gradient(135deg, #14b8a6 0%, #0d9488 100%);
    color: white;
    border-radius: 12px;
    font-weight: 600;
    transition: all 0.2s ease;
    box-shadow: 0 4px 14px 0 rgba(20, 184, 166, 0.35);
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px 0 rgba(20, 184, 166, 0.45);
  }

  .btn-primary svg {
    width: 18px;
    height: 18px;
    fill: currentColor;
  }

  .filter-bar {
    padding: 20px 40px;
    background: var(--surface-bg);
    border-top: 1px solid var(--surface-border);
    border-bottom: 1px solid var(--surface-border);
    backdrop-filter: blur(10px);
    position: sticky;
    top: 0;
    z-index: 100;
    transition: all 0.3s ease;
  }

  .filter-bar.has-filters {
    background: linear-gradient(90deg, 
      rgba(20, 184, 166, 0.05) 0%, 
      rgba(251, 191, 36, 0.05) 100%);
    border-color: rgba(20, 184, 166, 0.2);
  }

  .search-container {
    position: relative;
    max-width: 600px;
    margin: 0 auto 20px;
  }

  .search-icon {
    position: absolute;
    left: 20px;
    top: 50%;
    transform: translateY(-50%);
    width: 20px;
    height: 20px;
    stroke: var(--page-muted);
    stroke-width: 2;
    fill: none;
  }

  .search-container input {
    width: 100%;
    padding: 14px 20px 14px 52px;
    background: var(--surface-bg);
    border: 1px solid var(--surface-border);
    border-radius: 12px;
    color: var(--page-text);
    font-size: 1rem;
    transition: all 0.2s ease;
  }

  .search-container input:focus {
    outline: none;
    border-color: var(--page-accent);
    background: var(--surface-hover);
  }

  .search-container input::placeholder {
    color: var(--page-muted);
  }

  .filter-controls {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
    align-items: center;
  }

  .filter-select {
    padding: 10px 16px;
    background: var(--surface-bg);
    border: 1px solid var(--surface-border);
    border-radius: 8px;
    color: var(--page-text);
    font-size: 0.95rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .filter-select:hover {
    background: var(--surface-hover);
    border-color: rgba(255, 255, 255, 0.15);
  }

  .filter-select:focus {
    outline: none;
    border-color: var(--page-accent);
  }

  .filter-toggles {
    display: flex;
    gap: 1.5rem;
  }

  .toggle-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    color: var(--page-muted);
    font-size: 0.95rem;
    transition: color 0.2s ease;
  }

  .toggle-item:hover {
    color: var(--page-text);
  }

  .toggle-item input[type="checkbox"] {
    width: 18px;
    height: 18px;
    accent-color: var(--page-accent);
    cursor: pointer;
  }

  .results-meta {
    padding: 20px 40px 10px;
    color: var(--page-muted);
    font-size: 0.95rem;
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .results-count strong {
    color: var(--page-text);
    font-weight: 600;
  }

  .reset-filters {
    color: var(--page-accent);
    text-decoration: none;
    font-weight: 500;
    padding: 4px 12px;
    border: 1px solid var(--page-accent);
    border-radius: 6px;
    transition: all 0.2s ease;
    font-size: 0.85rem;
  }

  .reset-filters:hover {
    background: var(--page-accent);
    color: white;
  }

  .empty-state {
    padding: 80px 40px;
    text-align: center;
  }

  .empty-content h2 {
    font-size: 1.8rem;
    margin-bottom: 0.5rem;
    color: var(--page-text);
  }

  .empty-content p {
    color: var(--page-muted);
  }

  .content-section {
    padding: 40px;
  }

  .content-section.is-hidden {
    display: none;
  }

  .section-header {
    margin-bottom: 30px;
  }

  .section-title {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: var(--page-text);
  }

  .section-subtitle {
    color: var(--page-muted);
    font-size: 1rem;
  }

  .content-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(340px, 1fr));
    gap: 24px;
  }

  .content-card {
    background: var(--surface-bg);
    border: 1px solid var(--surface-border);
    border-radius: 16px;
    overflow: hidden;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
  }

  .content-card.is-hidden {
    display: none;
  }

  .content-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    border-color: rgba(255, 255, 255, 0.15);
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .filtering .content-card:not(.is-hidden) {
    animation: fadeIn 0.3s ease-out forwards;
  }

  mark {
    background: linear-gradient(135deg, #14b8a6, #fbbf24);
    color: white;
    padding: 2px 4px;
    border-radius: 4px;
    font-weight: 600;
  }

  .card-media {
    position: relative;
    aspect-ratio: 16 / 9;
    background-color: var(--tile-color, #1a1a1a);
    background-image: var(--tile-image);
    background-size: cover;
    background-position: center;
    background-attachment: local;
    overflow: hidden;
    display: flex;
    align-items: flex-end;
    text-decoration: none;
    color: white;
    transition: all 0.4s ease;
  }

  .card-media::before {
    content: '';
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0);
    transition: background 0.4s ease;
    pointer-events: none;
    z-index: 1;
  }

  .content-card:hover .card-media::before {
    background: rgba(0, 0, 0, 0.6);
  }

  .media-gradient {
    position: absolute;
    inset: 0;
    background: linear-gradient(
      to top,
      rgba(0, 0, 0, 0.9) 0%,
      rgba(0, 0, 0, 0.4) 50%,
      transparent 100%
    );
    transition: all 0.4s ease;
    z-index: 1;
  }

  .content-card:hover .media-gradient {
    background: linear-gradient(
      to top,
      rgba(0, 0, 0, 0.95) 0%,
      rgba(0, 0, 0, 0.7) 40%,
      rgba(0, 0, 0, 0.4) 70%,
      transparent 100%
    );
  }

  .hot-badge {
    position: absolute;
    top: 16px;
    left: 16px;
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 6px 12px;
    background: rgba(251, 191, 36, 0.9);
    backdrop-filter: blur(8px);
    border-radius: 8px;
    font-size: 0.75rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    z-index: 2;
    transition: opacity 0.3s ease, transform 0.3s ease;
    color: rgba(0, 0, 0, 0.85);
  }

  .content-card:hover .hot-badge {
    opacity: 0;
    transform: translateY(-10px);
  }

  .hot-icon {
    font-size: 1rem;
  }

  .media-scroll-container {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: auto;
    max-height: 55%;
    overflow: hidden;
    transition: max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 2;
  }

  .content-card:hover .media-scroll-container {
    max-height: 100%;
    overflow-x: hidden;
  }
  
  .content-card:hover .media-scroll-container.scrollable-active {
    overflow-y: auto;
  }

  .media-scroll-container::-webkit-scrollbar {
    width: 6px;
  }

  .media-scroll-container::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.3);
  }

  .media-scroll-container::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.4);
    border-radius: 3px;
  }

  .media-scroll-container::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.6);
  }

  .media-content {
    padding: 20px;
    padding-top: 20px;
    min-height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .content-card:hover .media-content {
    transform: translateY(-20px);
    padding-top: 40px;
  }

  .media-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    line-height: 1.2;
    text-shadow: 0 2px 10px rgba(0, 0, 0, 0.7);
  }

  .media-summary {
    font-size: 0.95rem;
    opacity: 0.95;
    line-height: 1.4;
    margin-bottom: 0;
    transition: margin-bottom 0.4s ease;
  }

  .content-card:hover .media-summary {
    margin-bottom: 1rem;
    opacity: 1;
  }

  .media-detail {
    max-height: 0;
    overflow: hidden;
    opacity: 0;
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .content-card:hover .media-detail {
    max-height: 300px;
    opacity: 1;
    margin-top: 0.5rem;
  }

  .media-detail p {
    font-size: 0.9rem;
    line-height: 1.6;
    margin: 0;
    color: rgba(255, 255, 255, 0.95);
  }

  .card-meta {
    padding: 16px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 12px;
    background: var(--surface-bg);
    flex: 1;
  }

  .meta-tags {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    flex: 1;
  }

  .meta-tag {
    padding: 4px 10px;
    background: var(--surface-hover);
    border: 1px solid var(--surface-border);
    border-radius: 6px;
    font-size: 0.8rem;
    color: var(--page-muted);
    white-space: nowrap;
  }

  .meta-tag--oss {
    background: rgba(20, 184, 166, 0.1);
    border-color: rgba(20, 184, 166, 0.3);
    color: rgb(94, 234, 212);
  }

  .card-actions {
    display: flex;
    gap: 8px;
  }

  .action-link {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    background: var(--surface-hover);
    border: 1px solid var(--surface-border);
    border-radius: 8px;
    color: var(--page-muted);
    transition: all 0.2s ease;
  }

  .action-link:hover {
    background: var(--surface-border);
    color: var(--page-text);
    transform: translateY(-2px);
  }

  .action-link svg {
    width: 16px;
    height: 16px;
    fill: currentColor;
  }

  @media (min-width: 1400px) {
    .content-grid {
      grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
    }
  }

  @media (max-width: 768px) {
    .page-hero {
      padding: 60px 20px;
    }

    .filter-bar {
      padding: 20px;
    }

    .content-section {
      padding: 20px;
    }

    .content-grid {
      grid-template-columns: 1fr;
      gap: 16px;
    }

    .filter-controls {
      flex-direction: column;
      gap: 12px;
    }

    .filter-toggles {
      width: 100%;
      justify-content: center;
    }
  }
</style>